@startuml

actor Application as app
participant "Implementation" as vulkan

group Create shader module
    note right app
        Create a shader module from SPIR-V
    end note

    app -> vulkan : <<vkCreateShaderModule>>(createInfo: VkShaderModuleCreateInfo)
    activate vulkan
    return shaderModule: VkShaderModule
end

group Create graph constants
    note right app
        Create array of graph constant tensors

        Shader module references constant tensors with integer id
    end note

    loop array<VkDataGraphPipelineConstantARM>
        app -> app : <<push>> { id, VkDataGraphPipelineConstantTensorARM { VkTensorDescriptionARM { format, shape, stride}, data } }
    end
end

group Create pipeline layout
    note right app
        The pipeline layout defines the external interface to the pipeline, listing the resource types bound to a given set and binding

        Shader module reference external resources with set, binding and type
    end note

    loop array<VkDescriptorSetLayout>
        loop array<VkDescriptorSetLayoutBinding>
            note right app
                For a given set, define the type of resource bound for a given binding
            end note

            app -> app : <<push>> { binding, type }
        end

        note right app
            Create descriptor set
        end note

        app -> vulkan : <<vkCreateDescriptorSetLayout>>(createInfo: VkDescriptorSetLayoutCreateInfo  { array<VkDescriptorSetLayoutBinding> })
        activate vulkan
        return descriptorSetLayout: VkDescriptorSetLayout
    end

    note right app
        Create pipeline layout
    end note

    app -> vulkan : <<vkCreatePipelineLayout>>(createInfo: array<VkPipelineLayoutCreateInfo> { array<VkDescriptorSetLayout>, array<VkPushConstantRange> })
    activate vulkan
    return pipelineLayouts: array<VkPipelineLayout>
end

group Create graph pipeline resources
    note right app
        The graph pipeline resource info lists resource types and data layout for each set and binding.

        The difference between the resource infos and pipeline layout is that the pipeline layout only
        lists the resource type.
    end note

    loop array<VkDataGraphPipelineResourceInfoARM>
        app -> app : <<push>> { set, binding, VkDataGraphPipelineResourceInfoTensorARM { VkTensorDescriptionARM { format, dimension, strides } } }
    end
end

group Create graph pipeline
    app -> vulkan : <<vkCreateDataGraphPipelinesARM>>(\n    createInfos: array<VkDataGraphPipelineCreateInfoARM> {\
                    \n        pipelineLayout, resourceInfos, VkDataGraphPipelineShaderModuleCreateInfoARM { shaderModule, graphConstants }\
                    \n    }\
                    \n)
    activate vulkan
    return pipelines: array<VkPipeline>
end

@enduml
