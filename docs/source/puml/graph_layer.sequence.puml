@startuml

actor Application as app
participant "Graph Layer" as graph
participant "SPIR-V pass" as spirv
participant "Compute" as compute

group Create pipeline layout
    app -> graph : <<vkCreatePipelineLayout>>()
    activate graph

        loop for each set and binding
            note right graph
                Create mapping from set and binding to tensor

                Tensor format, dimension and stride are provided when the graph pipeline is created
            end note

            graph -> compute : <<makeTensor>>(set: int, binding: int)
            activate compute
            return
        end

    return VkPipelineLayout
end

group Create graph pipeline
    app -> graph : <<vkCreateDataGraphPipelinesARM>>()
    activate graph

        note right graph
            Create constant tensor and map tensor to identifier
        end note

        loop array<VkDataGraphPipelineConstantTensorARM>
            graph -> compute : <<makeConstTensor>>(id: int, tensorDescription: VkTensorDescriptionARM, data: void *)
            activate compute
            return tensor
        end

        note right graph
            Lookup tensors in pipeline layout and assign format, dimensions and stride
        end note

        loop array<VkDataGraphPipelineResourceInfoTensorARM>
            graph -> compute : <<pipelineLayouts.getTensor>>(set, binding)
            activate compute
            return tensor

            graph -> compute : <<tensor.setDimensions>>(format, dimensions, strides)
            activate compute
            return
        end

        note right graph
            Use SPIR-V Tools optimizer to parse graph SPIR-V

            For each operator in the graph SPIR-V module one compute pipeline will be created
        end note

        graph -> spirv : <<run>>()
        activate spirv

            loop for each graph constant
                note right spirv
                    Map SPIR-V id to constant tensor
                end note
            end

            loop for each graph set/binding
                note right spirv
                    Map SPIR-V id to tensor bound by set and binding
                end note
            end

            loop for each operator in SPIR-V graph
                note right spirv
                    For each operator in the graph, create a new compute pipeline object
                end note

                spirv -> compute : <<make<operator>>>(...)
                activate compute
                return computePipeline
            end

        return

    return array<VkPipeline>
end

group Graph pipeline session
    note right spirv
        Create graph pipeline session
    end note

    app -> graph : <<vkCreateDataGraphPipelineSessionARM>>()
    activate graph
    return

    note right spirv
        Probe how much session memory that is required
    end note

    app -> graph : <<vkGetDataGraphPipelineSessionMemoryRequirementsARM>>()
    activate graph

        graph -> compute : <<getDataGraphPipelineSessionMemoryRequirements>>()
        activate compute

            loop for each tensor
                note right spirv
                    Calculate total size of all tensors
                end note
            end

        return VkMemoryRequirements2

    return VkMemoryRequirements2

    note right spirv
        Allocate and map memory to session
    end note

    app -> graph : <<vkBindDataGraphPipelineSessionMemoryARM>>()
    activate graph

        graph -> compute :
        activate compute

            loop for each tensor
                note right spirv
                    For each tensor, bind memory at offset in session memory
                end note
            end

        return
    return
end

group Command buffer

    note right app
        Nothing is done when pipeline is bound

        We need the descriptor sets to be able to bind compute pipelines
    end note

    app -> graph : <<vkCmdBindPipeline>>()
    activate graph
    return

    note right app
        Map tensors to set and binding
    end note

    app -> graph : <<vkCmdBindDescriptorSets>>()
    activate graph

        loop for each set and binding
            graph -> compute : <<setTensor>>(set, binding, tensor)
        end

    return

    note right app
        Map tensors to set and binding
    end note

    app -> graph : <<vkCmdDispatchDataGraphARM>>()
    activate graph

        loop for each compute pipeline
            graph -> compute : <<cmdDispatch>>()
            activate compute

                compute -> compute : <<cmdBindPipeline>>()
                compute -> compute : <<vkCmdBindDescriptorSets>>()
                compute -> compute : <<cmdPushConstants>>()

                loop for each tensor in descriptor set
                    compute -> compute : <<cmdPipelineBarrier>>()
                end

                compute -> compute : <<cmdDispatch>>()

            return
        end

    return

end

@enduml
