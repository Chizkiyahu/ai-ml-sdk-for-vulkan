@startuml

actor Application as app
participant "Implementation" as vulkan

group Update descriptor sets
    note right app
        Allocate descriptor sets
    end note

    app -> vulkan : <<vkAllocateDescriptorSets>>(layouts: array<VkDescriptorSetLayout>)
    activate vulkan
    return array<VkDescriptorSet>

    note right app
        Bind tensors to descriptor sets
    end note

    app -> vulkan : <<vkUpdateDescriptorSets>>(descriptorSets: VkWriteDescriptorSet { set, binding, VkWriteDescriptorSetTensorARM { tensorView: VkTensorViewARM } } }
    activate vulkan
    return shaderModule: VkShaderModule
end

group Create data graph pipeline session
    note right app
        Create data graph pipeline session
    end note

    app -> vulkan : <<vkCreateDataGraphPipelineSessionARM>>(createInfo: VkDataGraphPipelineSessionCreateInfoARM { pipeline })
    activate vulkan
    return VkDataGraphPipelineSessionARM

    note right app
        Probe how much session memory is required
    end note

    app -> vulkan : <<vkGetDataGraphPipelineSessionMemoryRequirementsARM>>(session: VkDataGraphPipelineSessionARM)
    activate vulkan
    return VkMemoryRequirements2

    note right app
        Allocate device memory
    end note

    app -> vulkan : <<vkAllocateMemory>>(size: VkDeviceSize)
    activate vulkan
    return VkDeviceMemory

    note right app
        Bind session memory
    end note

    app -> vulkan : <<vkBindDataGraphPipelineSessionMemoryARM>>(session: VkDataGraphPipelineSessionARM, memory: VkDeviceMemory, memoryOffset: VkDeviceSize)
    activate vulkan
    return
end

group Command buffer
    app -> vulkan : <<vkBindPipeline>>(pipeline: VkPipeline)
    activate vulkan
    return

    app -> vulkan : <<bindDescriptorSets>>(pipelineLayout: VkPipelineLayout, descriptorSets: array<DescriptorSet>)
    activate vulkan
    return

    app -> vulkan : <<vkCmdDispatchDataGraphARM>>(session: VkDataGraphPipelineSessionARM)
    activate vulkan
    return
end

@enduml
