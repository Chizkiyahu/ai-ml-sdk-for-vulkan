@startuml

object VkDataGraphPipelineSessionARM {
    pipeline : VkPipeline
}

object VkPipeline

object VkShaderModule

object VkDeviceMemory

object VkPipelineLayout {
    descriptorSetLayouts : VkDescriptorSetLayout[]
}

object VkDescriptorSetLayout {
    descriptorSetLayoutBindings : VkDescriptorSetLayoutBinding[]
}

object VkDescriptorSetLayoutBinding {
    binding : int
    descriptorType = VK_DESCRIPTOR_TYPE_TENSOR_ARM
}

object VkDataGraphPipelineConstantARM {
    next = VkDataGraphPipelineConstantTensorARM
    id : int
}

object VkDataGraphPipelineConstantTensorARM {
    tensorDescription : VkTensorDescriptionARM
    data : const void *
}

object VkDataGraphPipelineResourceInfoARM {
    next = VkDataGraphPipelineResourceInfoTensorARM
    descriptorSet : int
    binding : int
}

object VkDataGraphPipelineResourceInfoTensorARM {
    tensorDescription : VkTensorDescriptionARM
}

object VkTensorDescriptionARM {
    tiling : VkTensorTilingARM
    format : VkFormat
    dimensions : uint64_t[]
    strides : int64_t[]
}

VkDataGraphPipelineSessionARM --> VkPipeline

VkDataGraphPipelineSessionARM -> VkDeviceMemory

VkPipeline --> VkShaderModule : 1

VkPipeline --> VkPipelineLayout : 1
    VkPipelineLayout --> VkDescriptorSetLayout : 1..n
        VkDescriptorSetLayout --> VkDescriptorSetLayoutBinding : 1..n

VkPipeline --> VkDataGraphPipelineConstantARM : 1..n
    VkDataGraphPipelineConstantARM --> VkDataGraphPipelineConstantTensorARM : 1
        VkDataGraphPipelineConstantTensorARM --> VkTensorDescriptionARM

VkPipeline --> VkDataGraphPipelineResourceInfoARM : 1..n
    VkDataGraphPipelineResourceInfoARM --> VkDataGraphPipelineResourceInfoTensorARM : 1
        VkDataGraphPipelineResourceInfoTensorARM --> VkTensorDescriptionARM : 1

@enduml
