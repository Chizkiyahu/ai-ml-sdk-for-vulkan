@startuml

object VkCommandBuffer

object VkPipeline

object VkPipelineLayout {
    descriptorSetLayouts[]
}

object VkDescriptorSet {
    descriptorSetLayouts : VkDescriptorSetLayout[]
}

object VkDescriptorSetLayout {
    descriptorSetLayoutBindings[]
}

object VkDescriptorSetLayoutBinding {
    binding : int
    descriptorType = VK_DESCRIPTOR_TYPE_TENSOR_ARM
}

object VkDataGraphPipelineSessionARM {
    pipeline
}

object VkWriteDescriptorSet {
    next = VkWriteDescriptorSetTensorARM
    type = VK_DESCRIPTOR_TYPE_TENSOR_ARM
    binding : int
}

object VkWriteDescriptorSetTensorARM {
    tensorView
}

object VkTensorViewARM {
    tensor : VkTensorARM
    format : VkFormat
}

object VkTensorARM {
    tensorDescription : VkTensorDescriptionARM
}

object VkTensorDescriptionARM {
    tiling : VkTensorTilingARM
    format : VkFormat
    dimensions : uint64_t[]
    strides : int64_t[]
}

diamond bindDescriptorSets

VkCommandBuffer --> VkPipeline : <<vkBindPipeline>>
VkCommandBuffer --> bindDescriptorSets : <<vkBindDescriptorSets>>
    bindDescriptorSets --> VkDescriptorSet
    bindDescriptorSets --> VkPipelineLayout
VkCommandBuffer -> VkDataGraphPipelineSessionARM : <<vkCmdDispatchDataGraphARM>>

VkDescriptorSet --> VkDescriptorSetLayout
VkPipelineLayout --> VkDescriptorSetLayout
    VkDescriptorSetLayout --> VkDescriptorSetLayoutBinding

VkWriteDescriptorSet --> VkDescriptorSet
VkWriteDescriptorSet --> VkWriteDescriptorSetTensorARM
    VkWriteDescriptorSetTensorARM --> VkTensorViewARM
        VkTensorViewARM --> VkTensorARM
            VkTensorARM --> VkTensorDescriptionARM

@enduml
